name: course-svc
on:
  push:
    branches:
      - main
env:
  AWS_REGION: ap-southeast-1                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: course                          # set this to your Amazon ECR repository name
  ECS_SERVICE: course-admin-server                     # set this to your Amazon ECS service name
  ECS_CLUSTER: yourEcsCluster                     # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: yourTaskDefinitionFileName # set this to the path to your Amazon ECS task definition file, e.g. task-definition.json
  CONTAINER_NAME: yourContainerName
  # set this to the name of the container in the
  # containerDefinitions section of your task definition
jobs:
  # 编译打包
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-admin-server-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a


      - name: Build, tag, and push image to Amazon ECR A
        id: build-admin-server-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-admin-server
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest" >> "$GITHUB_OUTPUT"

      - name: AWS SSM Send-Command A
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-admin-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/admin-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
      - name: Build, tag, and push image to Amazon ECR B
        id: build-consumer-course-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-consumer-course
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:consumer-course-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:consumer-course-server-latest
      - name: AWS SSM Send-Command B
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-consumer-course-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/consumer-course-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
      - name: Build, tag, and push image to Amazon ECR C
        id: build-consumer-order-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-consumer-order
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:consumer-order-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:consumer-order-server-latest
      - name: AWS SSM Send-Command C
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-consumer-order-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/consumer-order-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d

      - name: Build, tag, and push image to Amazon ECR D
        id: build-course-login-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-login
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:course-login-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:course-login-server-latest

      - name: AWS SSM Send-Command D
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-course-login-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/course-login-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
  testOne:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-admin-server-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: TEST INSERT COURSE
        run: |
          chmod u+x ./shell/test-insert-course.sh
          ./shell/test-insert-course.sh

      - name: TEST REGISTER USER
        run: |
          chmod u+x ./shell/test-register-and-login.sh
          ./shell/test-register-and-login.sh
  testTwo:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-admin-server-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install JMeter
        run: |
          wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz

      - name: Run performance test
        run: |
          ./apache-jmeter-5.6.2/bin/jmeter -n -t /home/runner/work/course-svc/course-svc/JMeter/testplan.jmx -l /home/runner/work/course-svc/course-svc/JMeter/results.jtl
          cat JMeter/results.jtl
  # 编译打包
  deploy:
    needs:
      - testOne
      - testTwo
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-admin-server-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a


      - name: Build, tag, and push image to Amazon ECR A
        id: build-admin-server-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-admin-server
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$PROJECT_NAME-latest" >> "$GITHUB_OUTPUT"

      - name: AWS SSM Send-Command A
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-admin-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/admin-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
      - name: Build, tag, and push image to Amazon ECR B
        id: build-consumer-course-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-consumer-course
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:consumer-course-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:consumer-course-server-latest
      - name: AWS SSM Send-Command B
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-consumer-course-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/consumer-course-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
      - name: Build, tag, and push image to Amazon ECR C
        id: build-consumer-order-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-consumer-order
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:consumer-order-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:consumer-order-server-latest
      - name: AWS SSM Send-Command C
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-consumer-order-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/consumer-order-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d

      - name: Build, tag, and push image to Amazon ECR D
        id: build-course-login-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PROJECT_NAME: course-login
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:course-login-server-latest $PROJECT_NAME
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:course-login-server-latest

      - name: AWS SSM Send-Command D
        uses: peterkimzz/aws-ssm-send-command@master
        id: deploy-course-login-server-ssm
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ secrets.INSTANCE_ID }}
          working-directory: /home/course/course-login-server
          command: |
            docker-compose pull
            docker-compose down
            docker-compose up -d
  #   集成测试(功能测试)
#   性能测试

